)
subset(data)
?subset
subset(data, date = "2012-10-12")
f <- subset(data, date == "2012-10-12")
f <- subset(data, date == "2012-10-13")
f <- subset(data, date == "2012-10-14")
17568/288
a <- aggregate(data$steps, list(date = data$date), sum(count)
)
a <- aggregate(data$steps, list(date = data$date), sum
)
a <- aggregate(data$steps, list(date = data$date), sum)
a
a <- aggregate(data$steps, list(date = data$date), sum)
a <- aggregate(data$steps, list(date = data$date), sum)
a
a <- aggregate(data$steps, list(data$date), sum)
a
a <- aggregate(data$steps, list(data$date), sum)
?aggregate
data <- data.frame(read.table(unz("activity.zip", "activity.csv"),
sep=",", header = TRUE,
colClasses = c("numeric", "Date", "factor")))
stepsPerDay <- aggregate(data$steps, list(data$date), sum)
barplot(a[,2])
barplot(stepsPerDay[,2])
?barplot
str(stepsPerDay)
stepsPerDay <- aggregate(data$steps, list(names = data$date), sum)
str(stepsPerDay)
str(stepsPerDay)
View(stepsPerDay)
stepsPerDay <- aggregate(steps = data$steps, list(date = data$date), sum)
stepsPerDay <- aggregate(steps = data$steps, list(date = data$date), sum)
stepsPerDay <- aggregate(data$steps, list(date = data$date), sum)
barplot(stepsPerDay$steps, names.arg = stepsPerDay$date)
barplot(stepsPerDay$x, names.arg = stepsPerDay$date)
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, title = "EER")
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, main = "EER")
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, main = "EER")
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, main = "Steps per day")
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, main = "Steps per day", ylab = "Steps")
barplot(stepsPerDay$x, names.arg = stepsPerDay$date, main = "Steps per day", ylab = "Steps", xlab = "Day")
mean(stepsPerDayx)
mean(stepsPerDay$x)
stepsPerDay$x
?mean
mean(stepsPerDay$x, na.rm = TRUIE)
mean(stepsPerDay$x, na.rm = TRUE)
stepsMean <- mean(stepsPerDay$x, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$x, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$x)
median(stepsPerDay$x)
median(stepsPerDay$x, na.rm= TRUE)
mean(stepsPerDay$x, na.rm = TRUE)
The mean number of steps per day was `stepsMean` and the median number of steps per day was `stepsMedian`.
stepsMean <- mean(stepsPerDay$x, na.rm = TRUE)
as.character(mean(stepsPerDay$x, na.rm = TRUE))
as.character(round(mean(stepsPerDay$x, na.rm = TRUE),2))
stepsMedian <- as.character(round(median(stepsPerDay$x, na.rm = TRUE),2))
```
stepsPerInterval <- aggregate(data$steps, list(date = data$interval), mean)
61*288
stepsPerInterval
stepsPerInterval <- aggregate(data$steps, list(interval = data$interval), mean)
View(stepsPerInterval)
stepsPerInterval <- aggregate(data$steps, list(interval = data$interval), sum)
View(stepsPerInterval)
View(stepsPerInterval)
stepsPerInterval <- aggregate(data$steps, list(interval = data$interval), sum)
View(stepsPerInterval)
data$interval
str(data$interval)
subset(data)
?subset
subset(data(stata$interval == 40))
subset(data, stata$interval == 40)
subset(data, data$interval == 40)
a <- subset(data, data$interval == 40)
a
a <- subset(data, data$interval == 500)
a
a <- subset(data, data$interval == 1500)
a
sum(a$steps)
?aggregate
?complete
??complete
dataComplete <- complete.cases(data)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
View(stepsPerInterval)
plot(stepsPerInterval)
?? sort
sort(dataComplete$interval)
sort(stepsPerInterval$interval)
str(stepsPerInterval)
?transform
transform(stepsPerInterval, interval = as.numeric(interval) )
str(stepsPerInterval)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(interval) )
str(stepsPerInterval)
View(stepsPerInterval)
View(stepsPerInterval)
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
View(stepsPerInterval)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)) )
View(stepsPerInterval)
str(stepsPerInterval)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
View(stepsPerInterval)
sort(stepsPerInterval)
sort(stepsPerInterval$interval)
sort(stepsPerInterval$interval)
??sort
??order
order(stepsPerInterval$interval)
steprPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval[order(stepsPerInterval$interval),]
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
plot(stepsPerInterval)
plot(stepsPerInterval, type = l)
plot(stepsPerInterval, type = "l")
plot(stepsPerInterval, type = "l", main = stepe per interval)
plot(stepsPerInterval, type = "l", main = "Steps per interval")
plot(stepsPerInterval, type = "l", main = "Mean number of steps per interval", ylab = Number of Steps)
plot(stepsPerInterval, type = "l", main = "Mean number of steps per interval", ylab = "Number of Steps")
?? hour
hours(3)
library(chron)
hours(3)
hours(24)
hours(21)
hours(120)
?chron
times(1)
times(2)
times(1,1)
times(2,1)
times(0.1)
times(1/24)
View(stepsPerInterval)
60*24/5
60*24
5*28
24*60
View(data)
time(22:45)
time("22:45")
as.time("22:45")
as.Time("22:45")
?time
?times
times("23:00:00")
times("22:00:00")
?str
?string
?string
??string
str(stepsPerInterval)
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
str(stepsPerInterval)
lenght(stepsPerInterval[1,2])
length(stepsPerInterval[1,2])
length(stepsPerInterval[1,4])
length(stepsPerInterval[1,2])
length(stepsPerInterval[5,2])
length(stepsPerInterval[10,2])
length(stepsPerInterval[20,2])
stepsPerInterval[20,2]
length(stepsPerInterval[20,2])
View(stepsPerInterval)
length(stepsPerInterval[20,1])
stepsPerInterval[20,1]
paste("000",stepsPerInterval[20,1])
paste("000",stepsPerInterval[20,1], sep = "")
paste("000",stepsPerInterval[20,1], sep = "")
f <- paste("000",stepsPerInterval[20,1], sep = "")
f
substr(f)
substr(f, 2, last)
substr(f, 2, last)
?length of a string
??length of a string
??length
substr(f, 3, str_length(f))
substr(f, 3, str_length(f))
library(stingr)
library("stingr")
library("stringr")
library(stringr)
substr(f, 3, str_length(f))
substr(f, str_length(f)-4, str_length(f))
substr(f, str_length(f)-3, str_length(f))
View(stepsPerInterval)
View(stepsPerInterval)
dataComplete <- data[complete.cases(data),]
View(dataComplete)
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
View(stepsPerInterval)
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), sum)
View(stepsPerInterval)
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
View(stepsPerInterval)
plot(stepsPerInterval, type = "l", main = "Mean number of steps per 5 Minutes interval", ylab = "Number of Steps")
plot(stepsPerInterval, type = "l", main = "Mean number of steps per 5 Minutes interval", ylab = "Number of Steps")
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps per 5 Minutes interval", ylab = "Number of Steps")
?plot
plot(stepsPerInterval, type = "l", main = "Mean number of steps",
sub = "(per 5 Minutes interval)", ylab = "Number of Steps")
plot(stepsPerInterval, type = "l", main = "Mean number of steps\n(per 5 Minutes interval)",
ylab = "Number of Steps")
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
a <- stepsPerInterval
?tapply
function(x) {1 + 1}
fun <- function(x) {1 + 1}
fun(3)
sapply(a$interval, fun)
intervalTrans <- function(interval) {
interval <- paste("000", interval)
interval <- substr(interval, 3, str_length(interval))
interval
}
intervalTrans("45")
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, 3, str_length(interval))
interval
}
intervalTrans("45")
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval
}
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval
}
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval
}
intervalTrans("45")
intervalTrans("4")
intervalTrans("4999")
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1:2), ":", substr(interval,3:4), sep="")
interval
}
intervalTrans("4999")
intervalTrans("4999")
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), sep="")
interval
}
intervalTrans("4999")
intervalTrans("4999")
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval
}
intervalTrans("2214")
b <- intervalTrans("2214")
as.time(b)
as.Time(b)
time(b)
times(b)
times(b)
times(b)
?times
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- times(interval)
}
b <- intervalTrans("2214")
b
str(b)
a
sapply(a$interval, tinervalTrans)
sapply(a$interval, inervalTrans)
sapply(a$interval, inervalTrans())
sapply(a$interval, intervalTrans
)
sapply(a$interval, intervalTrans)
sapply(a$interval, intervalTrans)
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- times(interval)
return interval
}
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- times(interval)
}
sapply(c("1233", "43"), intervalTrans)
k <- sapply(c("1233", "43"), intervalTrans)
str(k)
intervalTrans
intervalTrans("2342")
intervalTrans("2342")
b <- intervalTrans("2214")
b
intervalTrans("2342")
if <- ntervalTrans("2342")
f <- intervalTrans("2342")
b <- intervalTrans("2214")
b
f
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- times(interval)
return interval
}
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- times(interval)
return(interval)
}
intervalTrans("2342")
sapply(c("2", "34"), intervalTrans)
lapply(c("2", "34"), intervalTrans)
?sapply
vapply(c("2", "34"), intervalTrans)
lapply(c("2", "34"), intervalTrans)
lapply(a$interval, intervalTrans)
?transform
str(A)
str(a)
transform(a, interval = intervalTrans(interval))
str(a)
a <- transform(a, interval = intervalTrans(interval))
str(a)
plot a
plot(a)
?time
plotting time
??plotting time
with(beaver1, {
time <- strptime(paste(1990, day, time %/% 100, time %% 100),
"%Y %j %H %M")
plot(time, temp, type = "l") # axis at 4-hour intervals.
# now label every hour on the time axis
plot(time, temp, type = "l", xaxt = "n")
r <- as.POSIXct(round(range(time), "hours"))
axis.POSIXct(1, at = seq(r[1], r[2], by = "hour"), format = "%H")
})
beaver1
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval)
return(interval)
}
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval)
return(interval)
}
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval)
return(interval)
}
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
library(stringr)
library(chron)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval)
return(interval)
}
stepsPerInterval <- transform(stepsPerInterval, interval = intervalTrans(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
library(stringr)
library(chron)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval, "%h:%m:s")
return(interval)
}
stepsPerInterval <- transform(stepsPerInterval, interval = intervalTrans(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
View(stepsPerInterval)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval, "%H:%M:%S")
return(interval)
}
stepsPerInterval <- transform(stepsPerInterval, interval = intervalTrans(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps")
library(stringr)
library(chron)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval, "%H:%M:%S")
return(interval)
}
stepsPerInterval <- transform(stepsPerInterval, interval = intervalTrans(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps", xlab = time)
dataComplete <- data[complete.cases(data),]
stepsPerInterval <- aggregate(dataComplete$steps, list(interval = dataComplete$interval), mean)
stepsPerInterval <- transform(stepsPerInterval, interval = as.numeric(as.character(interval)))
stepsPerInterval <- stepsPerInterval[order(stepsPerInterval$interval),]
stepsPerInterval <- transform(stepsPerInterval, interval = as.character(interval))
intervalTrans <- function(interval) {
interval <- paste("000", interval, sep = "")
interval <- substr(interval, str_length(interval)-3, str_length(interval))
interval <- paste(substr(interval,1,2), ":", substr(interval,3,4), ":00", sep="")
interval <- strptime(interval, "%H:%M:%S")
return(interval)
}
stepsPerInterval <- transform(stepsPerInterval, interval = intervalTrans(interval))
plot(stepsPerInterval, type = "l", main = "Mean number of steps\nper 5 Minutes interval",
ylab = "Number of Steps", xlab = time)
View(data)
a <- transform(a, interval = intervalTrans(interval))
complete.cases(data)
sum(complete.cases(data))/288
sum(complete.cases(data))
length(data)-sum(complete.cases(data))
lentgh(data)
length(data)
?length
length(data[1])
length(data[1,])
length(data[,1])
length(data[,1])-sum(complete.cases(data))
length(data[,1])-sum(complete.cases(data))/288
(length(data[,1])-sum(complete.cases(data)))/288
(length(data[,1])-sum(complete.cases(data)))/288
(length(data[,1])-sum(complete.cases(data)))/288
